#!/usr/bin/env node

/* Dependencies */
const app   = require('../app');
const debug = require('debug')('scrapwars:server');
const http  = require('http');
/* Dependencies */

/* Port Config */
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
/* Port Config */

/* Create Server */
const server = http.createServer(app);
/* Create Server */

/* Listen on provided port, on all network interfaces. */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/* Normalize a port into a number, string, or false. */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/* Event listener for HTTP server "error" event. */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/* Event listener for HTTP server "listening" event. */
function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/* ---------------------------------------------------------------------- */

/* WebSocket Manager */
const socketIO = require('socket.io');
const io       = socketIO(server);

io.on('connection', function(socket) {
    console.log('connection');
});

setInterval(function() {
    io.sockets.emit('message', 'hi!');
}, 1000);
/* WebSocket Manager */